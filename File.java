import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.text.SimpleDateFormat;
import java.util.Date;

public class MyFile {

    public static void listDirectory(String path) {
        try {
            Files.list(Paths.get(path)).forEach(System.out::println);
        } catch (IOException e) {
            System.out.println("Error listing directory: " + e.getMessage());
        }
    }

    public static void listPythonFiles(String path) {
        try {
            Files.list(Paths.get(path))
                    .filter(p -> p.toString().endsWith(".py"))
                    .forEach(System.out::println);
        } catch (IOException e) {
            System.out.println("Error listing Python files: " + e.getMessage());
        }
    }

    public static void isDirectory(String path) {
        System.out.println(Files.isDirectory(Paths.get(path)));
    }

    public static void define(String path) {
        Path p = Paths.get(path);
        if (Files.isDirectory(p)) {
            System.out.println("директория");
        } else if (Files.isRegularFile(p)) {
            System.out.println("файл");
        } else {
            System.out.println("неизвестный тип");
        }
    }

    public static void printPermissions(String path) {
        Path p = Paths.get(path);
        System.out.print(Files.isReadable(p) ? "r" : "-");
        System.out.print(Files.isWritable(p) ? "w" : "-");
        System.out.print(Files.isExecutable(p) ? "x" : "-");
        System.out.println();
    }

    public static void setPermissions(String path, String permissions) {
        Path p = Paths.get(path);
        try {
            Set<PosixFilePermission> perms = PosixFilePermissions.fromString(permissions);
            Files.setPosixFilePermissions(p, perms);
        } catch (IOException e) {
            System.out.println("Error setting permissions: " + e.getMessage());
        }
    }

    public static void printContent(String path) {
        try {
            Files.lines(Paths.get(path)).forEach(System.out::println);
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
    }

    public static void appendFooter(String path) {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(path), StandardOpenOption.APPEND)) {
            writer.write("# Autogenerated line\n");
        } catch (IOException e) {
            System.out.println("Error appending to file: " + e.getMessage());
        }
    }

    public static void createBackup(String path) {
        Path source = Paths.get(path);
        String date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
        Path target = Paths.get("/tmp/" + date + ".backup");

        try {
            Files.walkFileTree(source, new SimpleFileVisitor<>() {
                @Override
                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
                    Path targetDir = target.resolve(source.relativize(dir));
                    Files.createDirectories(targetDir);
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    Files.copy(file, target.resolve(source.relativize(file)), StandardCopyOption.REPLACE_EXISTING);
                    return FileVisitResult.CONTINUE;
                }
            });
            System.out.println("Backup created at: " + target.toString());
        } catch (IOException e) {
            System.out.println("Error creating backup: " + e.getMessage());
        }
    }

    public static void printLongestWord(String path) {
        try {
            String longestWord = Files.lines(Paths.get(path))
                    .flatMap(line -> Arrays.stream(line.split("\\s+")))
                    .max(Comparator.comparingInt(String::length))
                    .orElse("");
            System.out.println(longestWord);
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
    }

    public static void help() {
        System.out.println("MyFS 1.0 команды:");
        System.out.println("ls <path>               выводит список всех файлов и директорий для `path`");
        System.out.println("ls_py <path>            выводит список файлов с расширением `.py` в `path`");
        System.out.println("is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`");
        System.out.println("define <path>           выводит `директория` или `файл` в зависимости от типа `path`");
        System.out.println("readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя");
        System.out.println("setmod <path> <perm>    устанавливает права для файла `path`");
        System.out.println("cat <path>              выводит контент файла");
        System.out.println("append <path>           добавляет строку `# Autogenerated line` в конец `path`");
        System.out.println("bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`");
        System.out.println("greplong <path>         выводит самое длинное слово в файле");
        System.out.println("help                    выводит список команд и их описание");
        System.out.println("exit                    завершает работу программы");
    }

    public static void exit() {
        System.out.println("Goodbye");
        System.exit(0);
    }
}

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        MyFile.help();

        while (true) {
            System.out.print("> ");
            String[] input = scanner.nextLine().split(" ");
            String command = input[0];
            String path = input.length > 1 ? input[1] : null;
            String permissions = input.length > 2 ? input[2] : null;

            switch (command) {
                case "ls":
                    MyFile.listDirectory(path);
                    break;
                case "ls_py":
                    MyFile.listPythonFiles(path);
                    break;
                case "is_dir":
                    MyFile.isDirectory(path);
                    break;
                case "define":
                    MyFile.define(path);
                    break;
                case "readmod":
                    MyFile.printPermissions(path);
                    break;
                case "setmod":
                    MyFile.setPermissions(path, permissions);
                    break;
                case "cat":
                    MyFile.printContent(path);
                    break;
                case "append":
                    MyFile.appendFooter(path);
                    break;
                case "bc":
                    MyFile.createBackup(path);
                    break;
                case "greplong":
                    MyFile.printLongestWord(path);
                    break;
                case "help":
                    MyFile.help();
                    break;
                case "exit":
                    MyFile.exit();
                    break;
                default:
                    System.out.println("Unknown command. Type 'help' for a list of commands.");
            }
        }
    }
}
